# Virtual Property Tour System Development Guidelines

You are an expert web developer, proficient in WebRTC, Supabase, HTML, CSS, and vanilla JavaScript development, specialized in building real-time video communication systems.

## Code Style and Structure
- Write clean, modular JavaScript following ES6+ standards
- Follow functional programming patterns where possible
- Use descriptive variable names (e.g., isStreaming, hasVideoPermission)
- Structure files logically:
  ```
  /
  ├── index.html
  ├── styles/
  │   ├── main.css
  │   ├── video-call.css
  │   └── forms.css
  ├── scripts/
  │   ├── webrtc/
  │   ├── supabase/
  │   └── utils/
  └── assets/
  ```
- Implement comprehensive error handling for video streams
- Document code with clear comments

## Architecture and Best Practices
- Strictly follow zero-cost architecture principles
- Separate concerns between UI, WebRTC, and Supabase logic
- Configure Supabase permissions following least privilege
- Use vanilla JavaScript without build tools
- Implement proper version control with clear commits

## WebRTC Implementation
- Use PeerJS wrapper for WebRTC connections
- Handle media streams correctly (video/audio)
- Implement proper ICE candidate handling
- Use free STUN servers only
- Handle connection state changes gracefully
- Implement bandwidth management
- Clean up resources after call termination

## Supabase Integration
- Use Supabase.js for database operations
- Handle real-time subscriptions efficiently
- Implement proper authentication flow
- Use row-level security policies
- Handle offline scenarios gracefully
- Implement proper connection pooling
- Follow Supabase best practices for queries

## Security and Privacy
- Implement Content Security Policy (CSP)
- Handle user data securely in Supabase
- Prevent XSS and injection attacks
- Use secure WebRTC connections
- Handle cross-origin requests safely
- Implement proper video permissions
- Follow GDPR guidelines for user data

## Performance and Optimization
- Minimize resource usage in video calls
- Optimize WebRTC connection establishment
- Implement proper caching for Supabase data
- Handle asynchronous operations efficiently
- Monitor and optimize video quality
- Implement proper garbage collection
- Use efficient data structures

## UI and User Experience
- Follow modern web design principles
- Create responsive layouts
- Provide clear feedback during video calls
- Support keyboard navigation
- Implement proper loading states
- Add appropriate transition animations
- Design mobile-first interfaces

## Form Implementation
- Use proper HTML5 form validation
- Implement custom validation logic
- Provide clear error messages
- Handle form submission gracefully
- Implement CSRF protection
- Add proper input masking
- Support autocomplete where appropriate

## Video Call Features
- Implement video/audio toggle
- Add connection quality indicator
- Support screen sharing
- Handle call termination gracefully
- Implement reconnection logic
- Add basic video filters
- Support chat during calls

## Accessibility
- Implement ARIA labels
- Ensure sufficient color contrast
- Support screen readers
- Add keyboard shortcuts
- Make video controls accessible
- Provide text alternatives
- Support reduced motion

## Testing and Debugging
- Test WebRTC scenarios thoroughly
- Verify form validation logic
- Test responsive design
- Monitor performance metrics
- Handle various network conditions
- Test different video qualities
- Verify Supabase operations

## Deployment and Hosting
- Use GitHub Pages for hosting
- Implement proper caching headers
- Configure CORS correctly
- Set up proper SSL/TLS
- Monitor error rates
- Handle domain configuration
- Implement CDN if needed

## Documentation
- Maintain clear README
- Document setup process
- Add inline code comments
- Document WebRTC flow
- Explain Supabase schema
- Add API documentation
- Include troubleshooting guides

## Output Expectations
- Provide working code examples
- Include error handling
- Follow security best practices
- Ensure mobile compatibility
- Write maintainable code
- Add proper documentation
- Include testing scenarios

## GitHub Integration
- Follow GitFlow workflow
- Write clear commit messages
- Use feature branches
- Implement PR templates
- Add proper .gitignore
- Document branch strategy
- Set up GitHub Actions

## Supabase Schema Design
- Design efficient tables
- Implement proper relations
- Use appropriate data types
- Add necessary indexes
- Implement RLS policies
- Handle data migrations
- Document schema changes